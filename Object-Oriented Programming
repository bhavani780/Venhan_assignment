
18. Create a class Book with the following attributes and methods:
   *Attributes: `title`,`author`,`pages`
   *Methods: 
     *`__init__(self,title:str,author:str,pages:int)`:Constructor to initialize the attributes.
     *`__str__(self)->str:Method to return a string representation of the book.

Class Book:
    def __init__(self,title,author,pages):
        self.title = title
        self.author = author 
        self.pages = pages 


    def about_book(self):
        print(This Book has {} pages".format(self.pages))

book_obj = Book("The Power of Your Sub Conscious Mind","Joseph Murphy",232) 
book_obj.about_book()



19.Create a class `Rectangle` with the following attributes and methods:
*Attributes: length,width 
*Methods:
 *`__init__(self,length:float,width:float)`:Constructor to initialize the attributes.
 *`area(self)->float` :Method to calculate the area of the rectangle.
 *`perimeter(self)->float` :Method to calculate the perimeter of the rectangle.


class Rectangle:
    def __init__(self,length,width):
        self.length = length
        self.width = width 

    def area(self):
        # Area of Rectangle = length * width
        area = (self.length*self.width) 
        print(round(area,2))
        
    
    def perimeter(self):
        # Perimeter of Recatngle = 2(length + width)
        perimeter = (2*(self.length+self.width))
        print(round(perimeter,2))
        
rectangle_obj = Rectangle(2.3,4.1)
rectangle_obj.area()
rectangle_obj.perimeter()



20.Write a class `BankAccount` with the following:
*Attributes:account_number,account_holder,balance
*Methods:
 *`__init__(self,account_number:str,account_holder:str,balance:0)`:
 Constructor to initialize the attributes 
 *`deposit(self,amount:float)->None`:Method to deposit money into the account.
 *`withdraw(self,amount:float)->bool`:Method to withdraw money from the account.It should return True if the withdrawal was successful,
   and False if there were insufficient funds.
 *`get_balance(self)->float`:Method to return the current balance.


class BankAccount:
    def __init__(self,account_number,account_holder):
        self.account_number = account_number
        self.account_holder = account_holder
        self.balance = 0 

    def deposit(self,amount):
        self.balance += amount 
        
    def withdraw(self,amount):
        if self.balance >= amount:
            self.balance -= amount 
            print(True)
        else:
            print(False) 
            
    def get_balance(self):
        return self.balance
        
           
user = BankAccount(12345,"Shivansh")

user.deposit(1000)
user.withdraw(100)


21.Inheritance and Polymorphism
Create a class hierarchy for `Shape`,`Circle`,and `Rectangle`.The base class Shape should have methods to calculate area and perimeter,
which are overridden in the derived classes `Circle` and `Rectangle`.


class Shape:
    def area():
        pass 
    
    def perimeter():
        pass 
    
class Circle(Shape):
    def __init__(self,radius):
        self.radius = radius 
    
    def area(self):
        # Area of circle = pi * (r ** 2)
        # pi value = 3.14
        area = 3.14 * (self.radius ** 2)
        print(area)
        
    def perimeter(self):
        #Perimeter of circle = 2 * pi * r 
        # pi value = 3.14
        perimeter = 2 * 3.14 * self.radius 
        print(perimeter)
        
class Rectangle(Shape):
    def __init__(self,length,width):
        self.length = length
        self.width = width 

    def area(self):
        # Area of Rectangle = length * width
        area = (self.length*self.width) 
        print(round(area,2))
        
    
    def perimeter(self):
        # Perimeter of Recatngle = 2(length + width)
        perimeter = (2*(self.length+self.width))
        print(round(perimeter,2))
        
circle_obj = Circle(7)
rectangle_obj = Rectangle(3,4)
circle_obj.area()
circle_obj.perimeter()
rectangle_obj.area()
rectangle_obj.perimeter()



22.Class Methods and Static Methods  
Write a class `Employee` with class methods to keep track of the number of employees
and static methods to validate employee ID format (e.g., must be a string of digits).


class Employee:
    employees_count = 0
    
    def __init__(self, id, name):
        self.id = id
        self.name = name
        Employee.employees_count += 1
    
    @classmethod
    def get_total_employees(cls):
        print(cls.employees_count)
    
    @staticmethod
    def validate_employee_id(id):
        if isinstance(id, str) and id.isdigit():
            print(True)
        print(False)


employee1 = Employee("101", "Vahini")
employee2 = Employee("102", "Umika")
employee3 = Employee("103", "Shouri")
employee4 = Employee("104", "Tanmahi")

Employee.get_total_employees() 
Employee.validate_employee_id("101") 
Employee.validate_employee_id("ABC") 
Employee.validate_employee_id(123)   

