
*Data Structures and Algorithms

12. Write a function `merge_sort(arr: List[int]) -> List[int]` that implements the merge sort  algorithm.

from typing import List

def merge_sort(arr: List[int]) -> List[int]:
    if len(arr) <= 1:
        return arr
    
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]
    
    left_sorted = merge_sort(left_half)
    right_sorted = merge_sort(right_half)
    
    return merge(left_sorted, right_sorted)

def merge(left: List[int], right: List[int]) -> List[int]:
    merged = []
    left_index, right_index = 0, 0

    while left_index < len(left) and right_index < len(right):
        if left[left_index] < right[right_index]:
            merged.append(left[left_index])
            left_index += 1
        else:
            merged.append(right[right_index])
            right_index += 1

    while left_index < len(left):
        merged.append(left[left_index])
        left_index += 1
        
    while right_index < len(right):
        merged.append(right[right_index])
        right_index += 1
    
    return merged

arr = [2,7,3,8,1]
sorted_arr = merge_sort(arr)
print(sorted_arr)


13. Implement a function `find_duplicates(arr: List[int]) -> List[int]` that returns a list of  duplicate elements in the input list. 

def find_duplicates(list_1):
    duplicate_list = []
    for i in list_1:
        number_count = list_1.count(i)
        if number_count >= 2:
            if i not in duplicate_list:
                duplicate_list.append(i)
            
    print(duplicate_list)
    
list_1 = list(map(int,input().split()))
find_duplicates(list_1)


14.Write a function `is_palindrome(s: str) -> bool` to check if a given string is a  palindrome (reads the same forward and backward). 

def is_palindrome(str_1):
    reverse_str = str_1[::-1]
    if reverse_str == str_1:
        print(True)
    else:
        print(False)
    
str_1 = input()
is_palindrome(str_1)



